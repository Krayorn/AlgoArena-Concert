---
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Binary Logic Gates</title>
</head>
<body>
    <div id="controls">
        <button id="addOR" class="control-btn">
            <span class="icon">‚ûï</span> OR
        </button>
        <button id="addAND" class="control-btn">
            <span class="icon">‚ûï</span> AND
        </button>
        <button id="addNOT" class="control-btn">
            <span class="icon">‚ûï</span> NOT
        </button>
        <button id="addNAND" class="control-btn">
            <span class="icon">‚ûï</span> NAND
        </button>
        <button id="addXOR" class="control-btn">
            <span class="icon">‚ûï</span> XOR
        </button>
        <button id="clear" class="control-btn clear-btn">
            <span class="icon">üóëÔ∏è</span> Clear Circuit
        </button>
    </div>
    <div id="gates"></div>
    <script>
    let gates = [{id: 0, inputs: [], type: "input1", output: false}, {id: 1, inputs: [], type: "input2", output: false}, {id: 2, type: "output", inputs: [null], output: null}]
let input1 = false;
let input2 = false;

calculateOutput(gates)
displayGates(gates)


document.getElementById('addOR').addEventListener('click', () => addGate('OR'));
document.getElementById('addAND').addEventListener('click', () => addGate('AND'));
document.getElementById('addNOT').addEventListener('click', () => addGate('NOT'));
document.getElementById('addNAND').addEventListener('click', () => addGate('NAND'));
document.getElementById('addXOR').addEventListener('click', () => addGate('XOR'));
document.getElementById('clear').addEventListener('click', clearCircuit);

let id = 3;

function addGate(type) {
    const gate = { id, type, inputs: [], output: null };
    id++
    if (type === 'NOT') {
        gate.inputs = [null];
    } else {
        gate.inputs = [null, null];
    }
    
    gates.push(gate);
    displayGates(gates)
}

function displayGates(gates) {
    const gatesDiv = document.getElementById('gates');
    gatesDiv.innerHTML = '';

    gates.forEach(gate => {
        const gateElement = document.createElement('div');
        gateElement.className = 'gate';

        let inputsText = gate.inputs.map((input, index) => 
            `<span class="input">Input ${index}: ${input !== null ? input : 'None'}</span>`
        ).join(' ');
        
        let outputText = gate.output !== null ? gate.output.toString() : 'Not calculated';

        if (gate.output !== null) {
            gateElement.classList.add(gate.output ? 'true' : 'false');
        }

        gateElement.innerHTML = `
            <div class="gate-header">
                <h3>${gate.type.toUpperCase()} <span class="gate-id">(ID: ${gate.id})</span></h3>
            </div>
            <div class="gate-body">
                <p>Inputs: ${inputsText}</p>
                <p>Output: <span class="output ${gate.output !== null ? (gate.output ? 'true' : 'false') : ''}">${outputText}</span></p>
            </div>
        `;

        // Add toggle for input gates
        if (gate.type === 'input1' || gate.type === 'input2') {
            const toggleButton = document.createElement('button');
            toggleButton.className = 'toggle-btn';
            toggleButton.textContent = gate.output ? 'Turn OFF' : 'Turn ON';
            toggleButton.addEventListener('click', () => {
                gate.output = !gate.output;
                calculateOutput();
                displayGates(gates);
            });
            gateElement.querySelector('.gate-body').appendChild(toggleButton);
        }

        // Add link options for inputs (excluding input and output gates)
        if (gate.inputs.length > 0 && gate.type !== 'input1' && gate.type !== 'input2') {
            const linkForm = document.createElement('form');
            linkForm.className = 'link-form';

            gate.inputs.forEach((input, index) => {
                const select = document.createElement('select');
                select.id = `link-${gate.id}-${index}`;
                select.innerHTML = '<option value="">Select input</option>';

                gates.forEach(sourceGate => {
                    if (sourceGate.id !== gate.id && sourceGate.type !== 'output') {
                        select.innerHTML += `<option value="${sourceGate.id}">${sourceGate.type} (ID: ${sourceGate.id})</option>`;
                    }
                });

                const label = document.createElement('label');
                label.textContent = `Input ${index}: `;
                label.appendChild(select);

                linkForm.appendChild(label);

                select.addEventListener('change', (e) => {
                    const sourceId = parseInt(e.target.value);
                    link(sourceId, gate.id, index);
                    calculateOutput();
                    displayGates(gates);
                });
            });

            gateElement.querySelector('.gate-body').appendChild(linkForm);
        }

        gatesDiv.appendChild(gateElement);
    });
}

function link(id1, id2, outputIdx) {
    const inputGate = gates.find(g => g.id === id2)

    inputGate.inputs[outputIdx] = id1
}

function calculateOutput() {
    gates.forEach(gate => {
        if (gate.type !== "input1" && gate.type !== "input2") {
            gate.output = null
        }
    });

    let breakNeeded = false
    let c = 0
    while(true) {
        console.log('newTurn')
        c++
        if (c == 2) {
            console.log('error')
            break
        }
        gates.forEach(gate => {
            if (gate.inputs.length === 0) {
                return
            }

            if (gate.output !== null) {
                return
            }

            if (gate.type === "output") {
                const input1Value = gates.find(g => g.id === gate.inputs[0])?.output
                if (input1Value !== null && input1Value !== undefined) {
                    breakNeeded = true
                    gate.output = input1Value
                }
                return
            }


            const input1Value = gates.find(g => g.id === gate.inputs[0])?.output
            const input2Value = gates.find(g => g.id === gate.inputs[1])?.output         

            if ((input1Value !== undefined && gate.type === "NOT") || (input1Value !== undefined && input2Value !== undefined) ) {
                switch (gate.type) {
                    case 'AND':
                        gate.output = input1Value && input2Value;
                        break;
                    case 'OR':
                        gate.output = input1Value || input2Value;
                        break;
                    case 'NOT':
                        gate.output = !input1Value;
                        break;
                    case 'NAND':
                        gate.output = !(input1Value && input2Value);
                        break;
                    case 'XOR':
                        gate.output = input1Value !== input2Value;
                        break;
                }
                c = 0;
            }
        });
        if (breakNeeded) {
            break
        }
    }
}

function getInputValue(input) {
    if (!input) return false;
    if (input.type === 'input1') return input1;
    if (input.type === 'input2') return input2;
    if (input.type === 'gate') return gates[input.index].output;
    return false;
}

function clearCircuit() {
    gates = [{id: 0, inputs: [], type: "input1", output: false}, {id: 1, inputs: [], type: "input2", output: false}, {id: 2, type: "output", inputs: [null], output: null}]
    input1 = false;
    input2 = false;
    calculateOutput()
    displayGates(gates)
}
    </script>
</body>
</html>


<style is:global>
body {
    font-family: Arial, sans-serif;
    padding: 20px;
}

#controls {
    margin-bottom: 20px;
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
}

.control-btn {
    background-color: #4CAF50;
    border: none;
    color: white;
    padding: 10px 20px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
    margin: 4px 2px;
    transition-duration: 0.4s;
    cursor: pointer;
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    outline: none;
}

.control-btn:hover {
    background-color: #45a049;
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
}

.control-btn:active {
    background-color: #3e8e41;
    box-shadow: 0 1px 3px rgba(0,0,0,0.2);
    transform: translateY(1px);
}

.clear-btn {
    background-color: #f44336;
}

.clear-btn:hover {
    background-color: #d32f2f;
}

.clear-btn:active {
    background-color: #b71c1c;
}

.icon {
    margin-right: 5px;
    font-size: 18px;
}

#gates {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
}

.gate {
    border: 1px solid #ccc;
    padding: 5px;
    background-color: #f9f9f9;
    border-radius: 3px;
    width: calc(25% - 10px);
    min-width: 200px;
    font-size: 0.9em;
}

.gate.true {
    background-color: #e6ffe6;
    border-color: #00a000;
}

.gate.false {
    background-color: #ffe6e6;
    border-color: #a00000;
}

.gate-header {
    background-color: #f0f0f0;
    padding: 5px;
    border-bottom: 1px solid #ccc;
}

.gate-header h3 {
    margin: 0;
    font-size: 1em;
}

.gate-id {
    font-size: 0.8em;
    color: #666;
}

.gate-body {
    padding: 5px;
}

.input, .output {
    display: inline-block;
    padding: 1px 3px;
    border-radius: 2px;
    margin-right: 3px;
    font-size: 0.8em;
}

.input {
    background-color: #e0e0e0;
}

.output {
    font-weight: bold;
}

.output.true {
    background-color: #a0ffa0;
}

.output.false {
    background-color: #ffa0a0;
}

.toggle-btn {
    margin-top: 5px;
    padding: 3px 6px;
    cursor: pointer;
    font-size: 0.8em;
}

.link-form {
    margin-top: 5px;
}

.link-form label {
    display: block;
    margin-bottom: 3px;
    font-size: 0.8em;
}

.link-form select {
    margin-left: 5px;
    font-size: 0.8em;
}
</style>