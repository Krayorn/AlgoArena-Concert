---
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Character Climbing Stairs</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=VT323&display=swap');

        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-color: #02022a;
            flex-direction: column;
        }
        canvas {
            border: 1px solid black;
        }

        #instruct {
            font-family: "VT323", monospace;
            font-weight: 400;
            font-style: normal;
            color: white;
        }

    </style>
</head>
<body>
    <canvas id="gameCanvas" width="800" height="600"></canvas>
    
    <h1 id="instruct" >PRESS RIGHT!</h1>
    <svg style="display: none;" id="mute" height="50px" width="50px" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 496.159 496.159" xml:space="preserve" fill="#000000"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path style="fill:#02022a;" d="M496.159,248.086c0-137.022-111.07-248.082-248.076-248.082C111.071,0.004,0,111.063,0,248.086 c0,137.001,111.07,248.07,248.083,248.07C385.089,496.155,496.159,385.086,496.159,248.086z"></path> <g> <path style="fill:#FFFFFF;" d="M259.432,128.917c-3.409-1.851-7.559-1.688-10.813,0.425l-95.137,61.791h-35.164 c-5.845,0-10.583,4.738-10.583,10.582v92.728c0,5.845,4.738,10.583,10.583,10.583h35.164l95.137,61.79 c1.748,1.135,3.754,1.708,5.765,1.708c1.733,0,3.471-0.426,5.049-1.283c3.41-1.852,5.534-5.42,5.534-9.301V138.219 C264.966,134.339,262.842,130.768,259.432,128.917z"></path> <path style="fill:#FFFFFF;" d="M355.405,248.079l30.384-30.384c3.515-3.516,3.515-9.213,0-12.729 c-3.515-3.514-9.213-3.514-12.728,0l-30.384,30.385l-30.384-30.385c-3.515-3.514-9.213-3.514-12.728,0 c-3.515,3.516-3.515,9.213,0,12.729l30.385,30.384l-30.384,30.384c-3.515,3.516-3.515,9.213,0,12.729 c1.757,1.757,4.061,2.636,6.364,2.636c2.303,0,4.606-0.879,6.364-2.636l30.384-30.385l30.384,30.385 c1.757,1.757,4.061,2.636,6.364,2.636c2.303,0,4.606-0.879,6.364-2.636c3.515-3.516,3.515-9.213,0-12.729L355.405,248.079z"></path> </g> </g></svg>
    <svg id="unmute"  height="50px" width="50px" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 496.159 496.159" xml:space="preserve" fill="#ffffff"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path style="fill:#02022a;" d="M496.159,248.085c0-137.023-111.07-248.082-248.076-248.082C111.071,0.003,0,111.063,0,248.085 c0,137.001,111.07,248.07,248.083,248.07C385.089,496.155,496.159,385.086,496.159,248.085z"></path> <g> <path style="fill:#02022aFFFFF;" d="M266.494,128.917c-3.409-1.851-7.559-1.688-10.813,0.425l-95.137,61.791H125.38 c-5.845,0-10.583,4.738-10.583,10.582v92.728c0,5.845,4.738,10.583,10.583,10.583h35.164l95.137,61.79 c1.748,1.135,3.754,1.708,5.765,1.708c1.733,0,3.471-0.426,5.049-1.283c3.41-1.852,5.534-5.42,5.534-9.301V138.218 C272.028,134.338,269.904,130.768,266.494,128.917z"></path> <path style="fill:#02022aFFFFF;" d="M301.485,322.937c0.894,0,1.801-0.162,2.685-0.504c24.239-9.412,40.524-38.49,40.524-72.361 c0-29.956-13.2-57.047-33.63-69.018c-3.534-2.072-8.08-0.883-10.153,2.652c-2.072,3.535-0.885,8.082,2.651,10.152 c15.971,9.358,26.291,31.424,26.291,56.213c0,27.36-12.77,51.426-31.055,58.525c-3.82,1.482-5.715,5.783-4.231,9.604 C295.707,321.139,298.513,322.937,301.485,322.937z"></path> <path style="fill:#02022aFFFFF;" d="M320.856,353.882c0.896,0,1.803-0.163,2.685-0.505c34.046-13.219,57.822-55.979,57.822-103.988 c0-43.186-18.884-82.155-48.11-99.278c-3.533-2.073-8.081-0.884-10.152,2.652c-2.072,3.534-0.885,8.081,2.651,10.151 c24.768,14.512,40.771,48.456,40.771,86.475c0,42.027-19.883,79.101-48.353,90.154c-3.82,1.482-5.715,5.782-4.231,9.604 C315.079,352.084,317.884,353.882,320.856,353.882z"></path> </g> </g></svg>
    <script>
    const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

const spriteSheet = new Image();
spriteSheet.src = '/assets/stairs/Walk.png';

const focusSprite = new Image();
focusSprite.src = '/assets/stairs/Magic_sphere.png';

const idleSprite = new Image();
idleSprite.src = '/assets/stairs/Idle.png';

const cloud = new Image();
cloud.src = '/assets/stairs/cloud.png';

const cloud2 = new Image();
cloud2.src = '/assets/stairs/cloud2.png';

const cloud3 = new Image();
cloud3.src = '/assets/stairs/cloud3.png';

let clouds = [cloud, cloud2, cloud3];
let currentCloud = 0

const sky = new Image();
sky.src = '/assets/stairs/sky.png';

const stepIMG = new Image();
stepIMG.src = '/assets/stairs/step.png';

var audio = new Audio('/assets/stairs/musicBox.mp3');
audio.loop = true
let movedOnce = false

const mute = document.getElementById('mute');
const unmute = document.getElementById('unmute');

mute.addEventListener('click', () => {
    mute.style.display = 'none'
    unmute.style.display = 'block'
    audio.muted = false
});

unmute.addEventListener('click', () => {
    unmute.style.display = 'none'
    mute.style.display = 'block'
    audio.muted = true
});

let focus = false;
let idle = true;

let character = {
    x: 1,
    y: canvas.height - 142,
    speed: 1,
};

let stairs = [];
const numSteps = 20;
const stepWidth = 60;
const stepHeight = 30;
const stepGap = 0;

for (let i = 0; i < numSteps; i++) {
    stairs.push({
        x: i * (stepWidth + stepGap),
        y: canvas.height - (i + 1) * stepHeight,
        width: stepWidth,
        height: stepHeight,
        color: 'gray',
    });
}

let rightPressed = false;

document.addEventListener('keydown', (event) => {
    if (event.key === 'ArrowRight') {
        rightPressed = true;
    }
});

document.addEventListener('keyup', (event) => {
    if (event.key === 'ArrowRight') {
        rightPressed = false;
    }
});

let currentFrame = 0;
let count = 0

function drawCharacter() {
    if (idle) {
        ctx.drawImage(idleSprite, 128 * currentFrame, 0, 100, 200, character.x - 50, character.y, 100, 200);
        count++
        if (count === 10) {
            count = 0
            currentFrame = (currentFrame + 1) % 7; 
        }
    } else if (focus) {
        ctx.drawImage(focusSprite, 128 * 12, 0, 100, 200, character.x - 50, character.y, 100, 200);
        resetSprite()
    } else {   
        ctx.drawImage(spriteSheet, 128 * currentFrame, 0, 100, 200, character.x - 50, character.y, 100, 200);
        count++
        if (count === 10) {
            count = 0
            currentFrame = (currentFrame + 1) % 7; 
        }
    }
}

function drawStairs() {
    stairs.forEach(step => {
        ctx.drawImage(stepIMG, step.x, step.y, step.width, step.height);
    });
}

function updateCharacter() {
    if (rightPressed) {
        idleChar(false)
        const currentStep = Math.ceil(character.x / stepWidth) - 1
        
        if (stairs[currentStep].y > stairs[currentStep+1].y && !(character.x <= stairs[currentStep].x + (stepWidth / 2) - 10)) {
            stairs[currentStep].y -= 0.5
            character.y -= 0.5
            focusChar(true)
        } else {
            character.x += character.speed
            focusChar(false)
            if (character.x > canvas.width) {
                currentCloud = (currentCloud + 1) % clouds.length
                character = {
                    x: 1,
                    y: canvas.height - 142,
                    speed: 1,
                };

                stairs = [];
                for (let i = 0; i < numSteps; i++) {
                    stairs.push({
                        x: i * (stepWidth + stepGap),
                        y: canvas.height - (i + 1) * stepHeight,
                        width: stepWidth,
                        height: stepHeight,
                        color: 'gray',
                    });
                }
            }
        }
    } else {
        idleChar(true)
    }
}

function idleChar(state) {
    if (idle !== state) {
        resetSprite()
    }
    if (state) {
        focus = !state
    }
    idle = state
}

function focusChar(state) {
    if (focus !== state) {
        resetSprite()
    }
    if (state) {
        idle = !state
    }
    focus = state
}

function resetSprite() {
    count = 0
    currentFrame = 0
}

function drawBackground() {
    ctx.drawImage(sky, 0, 0, 800, 600);
    ctx.drawImage(clouds[currentCloud], 0, 0, 800, 600);
}

function gameLoop() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    if (rightPressed && !movedOnce) {
        movedOnce = true
        audio.play();
    }

    drawBackground()
    updateCharacter();
    drawStairs();
    drawCharacter();
    requestAnimationFrame(gameLoop);
}

gameLoop();

    </script>
</body>
</html>
